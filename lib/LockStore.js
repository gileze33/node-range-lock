"use strict";
var orm_1 = require('../orm');
var uuid = require('uuid');
var debug = require('debug')('range-lock');
var LockStore = function (url) {
    this.url = url;
    this.ready = false;
    this.connecting = false;
    var store = this;
    this.connect(function () {
        debug("LockStore connected to data store at " + url);
        setInterval(function () {
            store.tidy();
        }, 30000);
    });
};
LockStore.prototype.connect = function (cb) {
    if (this.ready) {
        return cb();
    }
    this.connectQueue = this.connectQueue || [];
    if (this.connecting) {
        return this.connectQueue.push(cb);
    }
    this.connecting = true;
    var done = function () {
        cb();
        if (store.connectQueue.length > 0) {
            for (var i = 0; i < store.connectQueue.length; i++) {
                store.connectQueue[i]();
            }
        }
    };
    var store = this;
    orm_1.default(this.url)
        .then(function (s) {
        var Sequelize = s.Sequelize, sequelize = s.sequelize, models = s.models;
        store.db = {
            models: models
        };
        store.ready = true;
        store.connecting = false;
        done();
    })
        .catch(function (err) {
        console.log("'", FATAL, range - lock, LockStore, failed, to, connect, to, data, (_a = [""], _a.raw = [""], store(_a)));
        throw err;
        var _a;
    });
};
var generateIntersectsSQL = function generateIntersectsSQL(start, end) {
    start.value = start.value * 1;
    end.value = end.value * 1;
    var orQuery = [{}, {}, {}, {}];
    orQuery[0]['$and'][start.field] = { $lte: start.value };
    orQuery[0]['$and'][end.field] = { $gte: end.value };
    orQuery[1]['$and'][start.field] = { $gte: start.value };
    orQuery[1]['$and'][start.field] = { $lte: end.value };
    orQuery[1]['$and'][end.field] = { $gte: end.value };
    orQuery[2]['$and'][start.field] = { $lte: start.value };
    orQuery[2]['$and'][end.field] = { $gte: start.value };
    orQuery[2]['$and'][end.field] = { $lte: end.value };
    orQuery[3]['$and'][start.field] = { $gte: start.value };
    orQuery[3]['$and'][end.field] = { $lte: end.value };
    return orQuery;
};
LockStore.prototype.find = function find(key, from, to, cb) {
    var store = this;
    var now = new Date().getTime();
    store.db.models.lock.findAll({ where: {
            key: key,
            expiry: {
                $gt: now
            },
            $or: generateIntersectsSQL({
                field: 'from',
                value: from
            }, {
                field: 'to',
                value: to
            })
        } }).then(function (results) {
        debug('find for key=' + key + ', from=' + from + ', to=' + to + ' got ' + results.length + ' results');
        cb(null, results);
    }).catch(function (err) {
        return cb(err);
    });
};
LockStore.prototype.create = function create(key, from, to, data, ttl, cb) {
    var store = this;
    var createLock = function createLock() {
        var now = new Date().getTime();
        var nowStr = (now + '');
        var lockID = nowStr.substr(-5) + '-' + nowStr.substr(-10, 5) + '-' + uuid.v4();
        store.db.models.lock.count({ where: {
                id: lockID
            } }).then(function (count) {
            if (count > 0) {
                debug('found conflict for lock id ' + lockID);
                return createLock();
            }
            var obj = {
                key: key,
                from: from,
                to: to,
                expiry: now + ttl,
                data: data,
                id: null
            };
            obj.id = lockID;
            debug('creating lock with ID ' + lockID, obj);
            return store.db.models.lock.create(obj);
        })
            .then(function (result) {
            if (cb)
                cb(null, result);
        })
            .catch(function (err) {
            return cb(err);
        });
    };
    createLock();
};
LockStore.prototype.get = function find(key, lockID, cb) {
    var store = this;
    var now = new Date().getTime();
    store.db.models.lock.findAll({ where: {
            key: key,
            id: lockID,
            expiry: {
                $gt: now
            }
        } })
        .then(function (results) {
        if (results.length === 0) {
            debug('get for key=' + key + ', id=' + lockID + ' found no valid locks');
            return cb(null, null);
        }
        var lock = results[0];
        debug('get for key=' + key + ', id=' + lockID + ' found a valid lock', lock);
        cb(null, lock);
    })
        .catch(function (err) {
        return cb(err);
    });
};
LockStore.prototype.remove = function remove(key, lockID, cb) {
    var store = this;
    debug('deleting lock with key=' + key + ', id=' + lockID);
    store.db.models.lock.destroy({ where: {
            key: key,
            id: lockID
        } })
        .then(function (result) {
        if (cb)
            cb(null, result);
    })
        .catch(function (err) {
        return cb(err);
    });
};
LockStore.prototype.tidy = function tidy(cb) {
    var store = this;
    var now = new Date().getTime();
    store.db.models.lock.count({ where: {
            expiry: {
                $lte: now
            }
        } })
        .then(function (count) {
        debug('tidy found ' + count + ' items to remove');
        return store.db.models.lock.destroy({ where: {
                expiry: {
                    $lte: now
                }
            } });
    })
        .then(function (result) {
        debug('tidy completed');
    })
        .catch(function (err) {
        if (cb)
            cb(err);
        debug('tidy got error', err);
        return;
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LockStore;
//# sourceMappingURL=data:application/json;base64,